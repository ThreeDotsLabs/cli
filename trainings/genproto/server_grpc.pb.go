// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: server.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Trainings_Init_FullMethodName             = "/Trainings/Init"
	Trainings_GetTrainings_FullMethodName     = "/Trainings/GetTrainings"
	Trainings_StartTraining_FullMethodName    = "/Trainings/StartTraining"
	Trainings_NextExercise_FullMethodName     = "/Trainings/NextExercise"
	Trainings_VerifyExercise_FullMethodName   = "/Trainings/VerifyExercise"
	Trainings_GetSolutionFiles_FullMethodName = "/Trainings/GetSolutionFiles"
	Trainings_GetExercises_FullMethodName     = "/Trainings/GetExercises"
	Trainings_GetExercise_FullMethodName      = "/Trainings/GetExercise"
	Trainings_SkipExercise_FullMethodName     = "/Trainings/SkipExercise"
)

// TrainingsClient is the client API for Trainings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingsClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	GetTrainings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTrainingsResponse, error)
	StartTraining(ctx context.Context, in *StartTrainingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NextExercise(ctx context.Context, in *NextExerciseRequest, opts ...grpc.CallOption) (*NextExerciseResponse, error)
	VerifyExercise(ctx context.Context, in *VerifyExerciseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VerifyExerciseResponse], error)
	GetSolutionFiles(ctx context.Context, in *GetSolutionFilesRequest, opts ...grpc.CallOption) (*GetSolutionFilesResponse, error)
	GetExercises(ctx context.Context, in *GetExercisesRequest, opts ...grpc.CallOption) (*GetExercisesResponse, error)
	GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*NextExerciseResponse, error)
	SkipExercise(ctx context.Context, in *SkipExerciseRequest, opts ...grpc.CallOption) (*SkipExerciseResponse, error)
}

type trainingsClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingsClient(cc grpc.ClientConnInterface) TrainingsClient {
	return &trainingsClient{cc}
}

func (c *trainingsClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, Trainings_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingsClient) GetTrainings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTrainingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainingsResponse)
	err := c.cc.Invoke(ctx, Trainings_GetTrainings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingsClient) StartTraining(ctx context.Context, in *StartTrainingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Trainings_StartTraining_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingsClient) NextExercise(ctx context.Context, in *NextExerciseRequest, opts ...grpc.CallOption) (*NextExerciseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextExerciseResponse)
	err := c.cc.Invoke(ctx, Trainings_NextExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingsClient) VerifyExercise(ctx context.Context, in *VerifyExerciseRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VerifyExerciseResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Trainings_ServiceDesc.Streams[0], Trainings_VerifyExercise_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VerifyExerciseRequest, VerifyExerciseResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trainings_VerifyExerciseClient = grpc.ServerStreamingClient[VerifyExerciseResponse]

func (c *trainingsClient) GetSolutionFiles(ctx context.Context, in *GetSolutionFilesRequest, opts ...grpc.CallOption) (*GetSolutionFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSolutionFilesResponse)
	err := c.cc.Invoke(ctx, Trainings_GetSolutionFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingsClient) GetExercises(ctx context.Context, in *GetExercisesRequest, opts ...grpc.CallOption) (*GetExercisesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExercisesResponse)
	err := c.cc.Invoke(ctx, Trainings_GetExercises_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingsClient) GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*NextExerciseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextExerciseResponse)
	err := c.cc.Invoke(ctx, Trainings_GetExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingsClient) SkipExercise(ctx context.Context, in *SkipExerciseRequest, opts ...grpc.CallOption) (*SkipExerciseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SkipExerciseResponse)
	err := c.cc.Invoke(ctx, Trainings_SkipExercise_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingsServer is the server API for Trainings service.
// All implementations should embed UnimplementedTrainingsServer
// for forward compatibility.
type TrainingsServer interface {
	Init(context.Context, *InitRequest) (*InitResponse, error)
	GetTrainings(context.Context, *emptypb.Empty) (*GetTrainingsResponse, error)
	StartTraining(context.Context, *StartTrainingRequest) (*emptypb.Empty, error)
	NextExercise(context.Context, *NextExerciseRequest) (*NextExerciseResponse, error)
	VerifyExercise(*VerifyExerciseRequest, grpc.ServerStreamingServer[VerifyExerciseResponse]) error
	GetSolutionFiles(context.Context, *GetSolutionFilesRequest) (*GetSolutionFilesResponse, error)
	GetExercises(context.Context, *GetExercisesRequest) (*GetExercisesResponse, error)
	GetExercise(context.Context, *GetExerciseRequest) (*NextExerciseResponse, error)
	SkipExercise(context.Context, *SkipExerciseRequest) (*SkipExerciseResponse, error)
}

// UnimplementedTrainingsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrainingsServer struct{}

func (UnimplementedTrainingsServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedTrainingsServer) GetTrainings(context.Context, *emptypb.Empty) (*GetTrainingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainings not implemented")
}
func (UnimplementedTrainingsServer) StartTraining(context.Context, *StartTrainingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTraining not implemented")
}
func (UnimplementedTrainingsServer) NextExercise(context.Context, *NextExerciseRequest) (*NextExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextExercise not implemented")
}
func (UnimplementedTrainingsServer) VerifyExercise(*VerifyExerciseRequest, grpc.ServerStreamingServer[VerifyExerciseResponse]) error {
	return status.Errorf(codes.Unimplemented, "method VerifyExercise not implemented")
}
func (UnimplementedTrainingsServer) GetSolutionFiles(context.Context, *GetSolutionFilesRequest) (*GetSolutionFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSolutionFiles not implemented")
}
func (UnimplementedTrainingsServer) GetExercises(context.Context, *GetExercisesRequest) (*GetExercisesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercises not implemented")
}
func (UnimplementedTrainingsServer) GetExercise(context.Context, *GetExerciseRequest) (*NextExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercise not implemented")
}
func (UnimplementedTrainingsServer) SkipExercise(context.Context, *SkipExerciseRequest) (*SkipExerciseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipExercise not implemented")
}
func (UnimplementedTrainingsServer) testEmbeddedByValue() {}

// UnsafeTrainingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingsServer will
// result in compilation errors.
type UnsafeTrainingsServer interface {
	mustEmbedUnimplementedTrainingsServer()
}

func RegisterTrainingsServer(s grpc.ServiceRegistrar, srv TrainingsServer) {
	// If the following call pancis, it indicates UnimplementedTrainingsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Trainings_ServiceDesc, srv)
}

func _Trainings_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainings_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainings_GetTrainings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServer).GetTrainings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainings_GetTrainings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServer).GetTrainings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainings_StartTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTrainingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServer).StartTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainings_StartTraining_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServer).StartTraining(ctx, req.(*StartTrainingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainings_NextExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServer).NextExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainings_NextExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServer).NextExercise(ctx, req.(*NextExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainings_VerifyExercise_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VerifyExerciseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrainingsServer).VerifyExercise(m, &grpc.GenericServerStream[VerifyExerciseRequest, VerifyExerciseResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Trainings_VerifyExerciseServer = grpc.ServerStreamingServer[VerifyExerciseResponse]

func _Trainings_GetSolutionFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSolutionFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServer).GetSolutionFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainings_GetSolutionFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServer).GetSolutionFiles(ctx, req.(*GetSolutionFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainings_GetExercises_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExercisesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServer).GetExercises(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainings_GetExercises_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServer).GetExercises(ctx, req.(*GetExercisesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainings_GetExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServer).GetExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainings_GetExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServer).GetExercise(ctx, req.(*GetExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainings_SkipExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingsServer).SkipExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Trainings_SkipExercise_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingsServer).SkipExercise(ctx, req.(*SkipExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Trainings_ServiceDesc is the grpc.ServiceDesc for Trainings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trainings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Trainings",
	HandlerType: (*TrainingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Trainings_Init_Handler,
		},
		{
			MethodName: "GetTrainings",
			Handler:    _Trainings_GetTrainings_Handler,
		},
		{
			MethodName: "StartTraining",
			Handler:    _Trainings_StartTraining_Handler,
		},
		{
			MethodName: "NextExercise",
			Handler:    _Trainings_NextExercise_Handler,
		},
		{
			MethodName: "GetSolutionFiles",
			Handler:    _Trainings_GetSolutionFiles_Handler,
		},
		{
			MethodName: "GetExercises",
			Handler:    _Trainings_GetExercises_Handler,
		},
		{
			MethodName: "GetExercise",
			Handler:    _Trainings_GetExercise_Handler,
		},
		{
			MethodName: "SkipExercise",
			Handler:    _Trainings_SkipExercise_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VerifyExercise",
			Handler:       _Trainings_VerifyExercise_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server.proto",
}
